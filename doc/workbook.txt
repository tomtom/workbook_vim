*workbook.txt*  Interactively work with interpreteted languages
                Author: Thomas Link, micathom AT gmail com?subject=vim

The goal of this plugin is to provide a similar user experience as 
Mathematica or Jupyter (within the limits of a text editor like vim).

Features~
- Run an interpreter as an inferior process.
- Provide means to evaluate code in this process (asynchronously without 
  blocking vim).
- Insert (or dynamically update) results right into the source code.
- Transcribe the interaction with the interpreter.
- Provide code completion (see 'omnifunc') for supported filetypes.

How it works~
- Send code to the interpreter.
- A placeholder is inserted in the source code.
- Upon receiving the result, the placeholder is being replaced with the 
  result

The following interpreters are supported~
- R (supports code completion)
- vim
- bash

Currenty, the main use case is to interact with R. Other than other vim 
plugins, the workbook plugin has no non-vim dependencies and works at 
least on Linux and Windows with no problems. The vim and the bash 
backend are mostly there to get the code right.

How to use this plugin~
- Open a file with a supported filetype.
- Type |:Workbook| or add the filetype to 
  |g:workbook_autosetup_filetypes| to automatically enable the workbook 
  mode for the specified filetypes.
- Press <c-cr> to evaluate the current paragraph.
- Press <localleader>w<F1> for help on other commands and maps.

-----------------------------------------------------------------------
Install~

Either use the zip archive:
    - Download the zip archive
    - Extract it to ~/.vim/pack/tml/start/workbook

or install from github:
    - Start a terminal
    - Change the working directory to ~/.vim/pack/tml/start/
    - Type: git clone https://github.com/tomtom/workbook_vim

NOTE: On Windows, ~/.vim might be ~/vimfiles. Please see 'runtimepath' for 
details.


Requirements~

This script requires tlib (vimscript #1863) to be installed -- see 
https://github.com/tomtom/tlib_vim.


========================================================================
Contents~

        g:workbook_autosetup_filetypes ........ |g:workbook_autosetup_filetypes|
        :Workbook ............................. |:Workbook|
        :Tlibtrace ............................ |:Tlibtrace|
        g:workbook#map_evalblock .............. |g:workbook#map_evalblock|
        g:workbook#map_evalblockinv ........... |g:workbook#map_evalblockinv|
        g:workbook#map_op ..................... |g:workbook#map_op|
        g:workbook#map_leader ................. |g:workbook#map_leader|
        g:workbook#transcript ................. |g:workbook#transcript|
        g:workbook#insert_results_in_buffer ... |g:workbook#insert_results_in_buffer|
        g:workbook#handlers ................... |g:workbook#handlers|
        workbook#GetRepl ...................... |workbook#GetRepl()|
        workbook#GetID ........................ |workbook#GetID()|
        workbook#InitBuffer ................... |workbook#InitBuffer()|
        workbook#SetupBuffer .................. |workbook#SetupBuffer()|
        :Workbooksend ......................... |:Workbooksend|
        :Workbookeval ......................... |:Workbookeval|
        :Workbookrepl ......................... |:Workbookrepl|
        :Workbookclear ........................ |:Workbookclear|
        :Workbookhelp ......................... |:Workbookhelp|
        workbook#UndoSetup .................... |workbook#UndoSetup()|
        workbook#Help ......................... |workbook#Help()|
        workbook#RemoveBuffer ................. |workbook#RemoveBuffer()|
        workbook#Op ........................... |workbook#Op()|
        workbook#Stop ......................... |workbook#Stop()|
        workbook#StopAll ...................... |workbook#StopAll()|
        workbook#Print ........................ |workbook#Print()|
        workbook#StripResults ................. |workbook#StripResults()|
        workbook#Send ......................... |workbook#Send()|
        workbook#Eval ......................... |workbook#Eval()|
        workbook#OmniComplete ................. |workbook#OmniComplete()|
        workbook#InteractiveRepl .............. |workbook#InteractiveRepl()|
        workbook#NextCmd ...................... |workbook#NextCmd()|
        workbook#Quicklist .................... |workbook#Quicklist()|
        workbook#EditItem ..................... |workbook#EditItem()|
        g:workbook#repl#transript_new_cmd ..... |g:workbook#repl#transript_new_cmd|
        g:workbook#repl#transript_drop_cmd .... |g:workbook#repl#transript_drop_cmd|
        workbook#repl#New ..................... |workbook#repl#New()|
        prototype.Input
        prototype.SetTranscribe
        prototype.DoTranscribe
        prototype.DoInsertResultsInBuffer
        prototype.Send
        prototype.Eval
        prototype.ProcessEval
        prototype.GetResultLineRx
        prototype.GetResultLine
        prototype.SetPlaceholder
        prototype.GetPlaceholder
        prototype.IsKnownPlaceholder
        prototype.GetCurrentPlaceholder
        prototype.PrepareMessage
        prototype.ConsumeOutput
        prototype.ConsumeError
        prototype.SplitMessage
        prototype.Transcribe
        prototype.TranscribeNow
        prototype.ProcessOutput


========================================================================
plugin/workbook.vim~

                                                    *g:workbook_autosetup_filetypes*
g:workbook_autosetup_filetypes (default: [])

                                                    *:Workbook*
:Workbook


========================================================================
autoload/workbook.vim~

                                                    *:Tlibtrace*
:Tlibtrace

                                                    *g:workbook#map_evalblock*
g:workbook#map_evalblock       (default: '<c-cr>')
    Evaluate the current paragraph

                                                    *g:workbook#map_evalblockinv*
g:workbook#map_evalblockinv    (default: '<c-s-cr>')
    Evaluate the current paragraph with |g:workbook#insert_results_in_buffer| temporarily inversed.

                                                    *g:workbook#map_op*
g:workbook#map_op              (default: '<localleader>e')
    Operator map

                                                    *g:workbook#map_leader*
g:workbook#map_leader          (default: '<localleader>w')
    Map leader

                                                    *g:workbook#transcript*
g:workbook#transcript          (default: 1)
    If true, maintain a transcript

                                                    *g:workbook#insert_results_in_buffer*
g:workbook#insert_results_in_buffer (default: 1)
    If true, insert the results of an evaluation below the evaluated 
    code.

    This parameter will be overridden by the value of 
    b:workbook_insert_results_in_buffer_once or 
    b:workbook_insert_results_in_buffer if existant.

                                                    *g:workbook#handlers*
g:workbook#handlers            (default: [{'key': 5, 'agent': 'workbook#EditItem', 'key_name': '<c-e>', 'help': 'Edit item'}])

                                                    *workbook#GetRepl()*
workbook#GetRepl(...)

                                                    *workbook#GetID()*
workbook#GetID(args, bufnr)

                                                    *workbook#InitBuffer()*
workbook#InitBuffer(args, ...)

                                                    *workbook#SetupBuffer()*
workbook#SetupBuffer()

                                                    *:Workbooksend*
:Workbooksend

                                                    *:Workbookeval*
:Workbookeval

                                                    *:Workbookrepl*
:Workbookrepl

                                                    *:Workbookclear*
:Workbookclear

                                                    *:Workbookhelp*
:Workbookhelp

                                                    *workbook#UndoSetup()*
workbook#UndoSetup()

                                                    *workbook#Help()*
workbook#Help()

                                                    *workbook#RemoveBuffer()*
workbook#RemoveBuffer(bufnr)
    Called from BufDelete

                                                    *workbook#Op()*
workbook#Op(type, ...)

                                                    *workbook#Stop()*
workbook#Stop(...)

                                                    *workbook#StopAll()*
workbook#StopAll(...)

                                                    *workbook#Print()*
workbook#Print(line1, line2, ...)

                                                    *workbook#StripResults()*
workbook#StripResults(line1, line2, ...)

                                                    *workbook#Send()*
workbook#Send(code)

                                                    *workbook#Eval()*
workbook#Eval(code)

                                                    *workbook#OmniComplete()*
workbook#OmniComplete(findstart, base)

                                                    *workbook#InteractiveRepl()*
workbook#InteractiveRepl()

                                                    *workbook#NextCmd()*
workbook#NextCmd()

                                                    *workbook#Quicklist()*
workbook#Quicklist(word)

                                                    *workbook#EditItem()*
workbook#EditItem(world, items)


========================================================================
autoload/workbook/repl.vim~

                                                    *g:workbook#repl#transript_new_cmd*
g:workbook#repl#transript_new_cmd (default: &previewheight .'split')

                                                    *g:workbook#repl#transript_drop_cmd*
g:workbook#repl#transript_drop_cmd (default: 'drop')

                                                    *workbook#repl#New()*
workbook#repl#New(args)

prototype.Input
    async

prototype.SetTranscribe

prototype.DoTranscribe

prototype.DoInsertResultsInBuffer

prototype.Send
    async

prototype.Eval
    sync

prototype.ProcessEval

prototype.GetResultLineRx

prototype.GetResultLine

prototype.SetPlaceholder

prototype.GetPlaceholder

prototype.IsKnownPlaceholder
    TODO Should this be a function that scans all repls?

prototype.GetCurrentPlaceholder

prototype.PrepareMessage

prototype.ConsumeOutput

prototype.ConsumeError

prototype.SplitMessage

prototype.Transcribe

prototype.TranscribeNow

prototype.ProcessOutput



vim:tw=78:fo=w2croql:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
