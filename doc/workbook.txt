*workbook.txt*  Notebook-like interaction with R etc.
                Author: Thomas Link, micathom AT gmail com?subject=vim

The long-term goal of this plugin is to provide notebook-like interaction with 
interpreted languages similar to the Mathematica or Jupyter (within the limits 
of a text editor like vim).

Features~
- Run an interpreter as an inferior process.
- Send code to this process (asynchronously without blocking vim).
- Insert (or dynamically update) the results into the source code (as 
  commented out block below the respective source code).
- Transcribe the interaction with the interpreter.
- Provide code completion (see 'omnifunc') for supported filetypes.

How to use this plugin~
- Open a file with a supported filetype (see below or 
  |workbook#GetSupportedFiletypes()|).
- Type |:Workbook| or add the filetype to 
  |g:workbook_autosetup_filetypes| to automatically enable the workbook 
  mode for the specified filetypes.
- Press <c-cr> to evaluate the current paragraph.
- Press <localleader>w<F1> for help on other commands and maps.

The following filetypes are supported~
- R (supports code completion)

Plus experimental/basic support for:
- fsharp
- scala
- sh (default: bash)
- vim

Currenty, the main use case is to interact with R. Other than other 
well-known R-related vim plugins, the workbook plugin has no non-vim 
dependencies and works at least on Linux and Windows with no problems. 
The vim and the bash backend are mostly there to get the code right.


-----------------------------------------------------------------------
Install~

Either use the zip archive:
    - Download the zip archive
    - Extract it to ~/.vim/pack/tml/start/workbook

or install from github:
    - Start a terminal
    - Change the working directory to ~/.vim/pack/tml/start/
    - Type: git clone https://github.com/tomtom/workbook_vim

NOTE: On Windows, ~/.vim might be ~/vimfiles. Please see 'runtimepath' for 
details.


Requirements~

This script requires tlib (vimscript #1863) to be installed -- see 
https://github.com/tomtom/tlib_vim.


========================================================================
Contents~

        :Workbook ................................. |:Workbook|
        :Workbooks ................................ |:Workbooks|
        g:workbook#map_op ......................... |g:workbook#map_op|
        g:workbook#map_leader ..................... |g:workbook#map_leader|
        g:workbook#map_evalline ................... |g:workbook#map_evalline|
        g:workbook#map_evalblock .................. |g:workbook#map_evalblock|
        g:workbook#map_evalinsertblock ............ |g:workbook#map_evalinsertblock|
        g:workbook#transcript ..................... |g:workbook#transcript|
        g:workbook#insert_results_in_buffer ....... |g:workbook#insert_results_in_buffer|
        :Workbooksend ............................. |:Workbooksend|
        :Workbookeval ............................. |:Workbookeval|
        :Workbookrepl ............................. |:Workbookrepl|
        :Workbookclear ............................ |:Workbookclear|
        :Workbookhelp ............................. |:Workbookhelp|
        :Workbookreset ............................ |:Workbookreset|
        workbook#ResetRepl ........................ |workbook#ResetRepl()|
        workbook#GetSupportedFiletypes ............ |workbook#GetSupportedFiletypes()|
        g:workbook#ft#r#args ...................... |g:workbook#ft#r#args|
        g:workbook#ft#r#save ...................... |g:workbook#ft#r#save|
        g:workbook#ft#r#restore ................... |g:workbook#ft#r#restore|
        g:workbook#ft#r#highlight_debug ........... |g:workbook#ft#r#highlight_debug|
        g:workbook#ft#r#mode ...................... |g:workbook#ft#r#mode|
        g:workbook#ft#r#handle_qfl_expression_f ... |g:workbook#ft#r#handle_qfl_expression_f|
        g:workbook#ft#r#use_formatR ............... |g:workbook#ft#r#use_formatR|
        g:workbook#ft#r#formatR_options ........... |g:workbook#ft#r#formatR_options|
        workbook#ft#r#Debug ....................... |workbook#ft#r#Debug()|
        workbook#ft#r#Undebug ..................... |workbook#ft#r#Undebug()|
        prototype.Input
        prototype.Send
        prototype.Eval
        prototype.IsKnownPlaceholder


------------------------------------------------------------------------
                                                    *plugin/workbook.vim*
                                                    *:Workbook*
:Workbook [--filetype=FILETYPE] [--cmd=CMD] [--args=ARGS] [-- OTHER]
    If no FILETYPE is specified 'filetype' is used.
    CMD and ARGS can be used to override the default parameters for the 
    gived filetype.
    OTHER arguments are added to CMD ARGS when starting the inferior 
    process.

    Additional filetype-specific arguments:
    r:
      --[no-]save ...... Save an image (default: --no-save)
      --[no-]restore ... Restore an image (default: --restore)

                                                    *:Workbooks*
:Workbooks
    Select a repl from a list of inferior processes. The list also 
    included their status.


------------------------------------------------------------------------
                                                    *autoload/workbook.vim*
                                                    *g:workbook#map_op*
g:workbook#map_op              (default: '<localleader>e')
    Operator map

                                                    *g:workbook#map_leader*
g:workbook#map_leader          (default: '<localleader>w')
    Map leader

                                                    *g:workbook#map_evalline*
g:workbook#map_evalline        (default: '<s-cr>')
    Evaluate the current line.

                                                    *g:workbook#map_evalblock*
g:workbook#map_evalblock       (default: '<c-cr>')
    Evaluate the current paragraph or the current visual selection.

                                                    *g:workbook#map_evalinsertblock*
g:workbook#map_evalinsertblock (default: '<c-s-cr>')
    Evaluate the current paragraph and always insert the result.

                                                    *g:workbook#transcript*
g:workbook#transcript          (default: 1)
    If true, maintain a transcript

                                                    *g:workbook#insert_results_in_buffer*
g:workbook#insert_results_in_buffer (default: -1)
    If not zero, insert the results of an evaluation below the 
    evaluated code.
    If 1, insert the result.
    If -1, insert the result only if the transcipt isn't visible.

    This parameter will be overridden by the value of 
    b:workbook_insert_results_in_buffer_once or 
    b:workbook_insert_results_in_buffer if existant.

                                                    *:Workbooksend*
:Workbooksend
    Send code to the REPL.

                                                    *:Workbookeval*
:Workbookeval
    Eval some code and display the result.

                                                    *:Workbookrepl*
:Workbookrepl
    Remove the current block's placeholder.

                                                    *:Workbookclear*
:Workbookclear
    Remove any placeholders in the current buffer.

                                                    *:Workbookhelp*
:Workbookhelp
    Display help on available maps etc.

                                                    *:Workbookreset*
:Workbookreset
    Reset a REPL's state.

                                                    *workbook#ResetRepl()*
workbook#ResetRepl()
    When a REPL is stuck, some REPLs support a way to reset the repl's 
    state.

                                                    *workbook#GetSupportedFiletypes()*
workbook#GetSupportedFiletypes()
    Return a list of supported filetypes.


------------------------------------------------------------------------
                                                    *autoload/workbook/ft/r.vim*
                                                    *g:workbook#ft#r#args*
g:workbook#ft#r#args           (default: '--silent '. (g:workbook#ft#r#cmd =~ '\<Rterm\%(\.exe\)\>' ? '--ess' : '--no-readline --interactive'))
    let g:workbook#ft#r#args = '--slave --no-save'   "

                                                    *g:workbook#ft#r#save*
g:workbook#ft#r#save           (default: 1)
    If true, save R sessions by default.

                                                    *g:workbook#ft#r#restore*
g:workbook#ft#r#restore        (default: 1)
    If true, restore R sessions by default.

                                                    *g:workbook#ft#r#highlight_debug*
g:workbook#ft#r#highlight_debug (default: 'SpellRare')
    Highlight group for debugged functions.

                                                    *g:workbook#ft#r#mode*
g:workbook#ft#r#mode           (default: '')
    Defined how to talk to R. Possible values are:
    '' ......... run via |job_start()|
    'rserve' ... Use Rserve (doesn't work properly yet)

                                                    *g:workbook#ft#r#handle_qfl_expression_f*
g:workbook#ft#r#handle_qfl_expression_f (default: 'cgetexpr %s | cwindow')
    An ex command as format string. Defined how the results from 
    codetools:checkUsage are displayed.

                                                    *g:workbook#ft#r#use_formatR*
g:workbook#ft#r#use_formatR    (default: 1)
    If true, format code with formatR.

                                                    *g:workbook#ft#r#formatR_options*
g:workbook#ft#r#formatR_options (default: '')
    Additional arguments to formatR::tidy_source().

                                                    *workbook#ft#r#Debug()*
workbook#ft#r#Debug(fn)
    Toggle the debug status of a function.

                                                    *workbook#ft#r#Undebug()*
workbook#ft#r#Undebug(fn)
    Undebug a debugged function.


------------------------------------------------------------------------
                                                    *autoload/workbook/repl.vim*
prototype.Input
    async

prototype.Send
    async

prototype.Eval
    sync

prototype.IsKnownPlaceholder
    TODO Should this be a function that scans all repls?



vim:tw=78:fo=w2croql:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
