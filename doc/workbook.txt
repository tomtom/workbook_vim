*workbook.txt*  Interactively work with interpreteted languages (R etc.)
                Author: Thomas Link, micathom AT gmail com?subject=vim

The goal of this plugin is to provide a similar user experience as 
Mathematica or Jupyter (within the limits of a text editor like vim).

Features~
- Run an interpreter as an inferior process.
- Provide means to evaluate code in this process (asynchronously without 
  blocking vim).
- Insert (or dynamically update) results right into the source code.
- Transcribe the interaction with the interpreter.
- Provide code completion (see 'omnifunc') for supported filetypes.

How it works: When evaluating a piece of code~
- The code is sent to the interpreter.
- A placeholder is inserted in the source code.
- Upon receiving the result, the placeholder is being replaced with the 
  result.

How to use this plugin~
- Open a file with a supported filetype.
- Type |:Workbook| or add the filetype to 
  |g:workbook_autosetup_filetypes| to automatically enable the workbook 
  mode for the specified filetypes.
- Press <c-cr> to evaluate the current paragraph.
- Press <localleader>w<F1> for help on other commands and maps.

The following filetypes are supported~
- R (supports code completion)
- vim
- sh (default: bash)

Currenty, the main use case is to interact with R. Other than other 
well-known R-related vim plugins, the workbook plugin has no non-vim 
dependencies and works at least on Linux and Windows with no problems. 
The vim and the bash backend are mostly there to get the code right.


-----------------------------------------------------------------------
Install~

Either use the zip archive:
    - Download the zip archive
    - Extract it to ~/.vim/pack/tml/start/workbook

or install from github:
    - Start a terminal
    - Change the working directory to ~/.vim/pack/tml/start/
    - Type: git clone https://github.com/tomtom/workbook_vim

NOTE: On Windows, ~/.vim might be ~/vimfiles. Please see 'runtimepath' for 
details.


Requirements~

This script requires tlib (vimscript #1863) to be installed -- see 
https://github.com/tomtom/tlib_vim.


========================================================================
Contents~

        g:workbook#map_evalblock .............. |g:workbook#map_evalblock|
        g:workbook#map_evalblockinv ........... |g:workbook#map_evalblockinv|
        g:workbook#map_op ..................... |g:workbook#map_op|
        g:workbook#map_leader ................. |g:workbook#map_leader|
        g:workbook#transcript ................. |g:workbook#transcript|
        g:workbook#insert_results_in_buffer ... |g:workbook#insert_results_in_buffer|
        workbook#RemoveBuffer ................. |workbook#RemoveBuffer()|
        g:workbook#ft#r#args .................. |g:workbook#ft#r#args|
        g:workbook#ft#r#highlight_debug ....... |g:workbook#ft#r#highlight_debug|
        g:workbook#ft#r#mode .................. |g:workbook#ft#r#mode|
        workbook#ft#r#Debug ................... |workbook#ft#r#Debug()|
        workbook#ft#r#Undebug ................. |workbook#ft#r#Undebug()|
        prototype.Input
        prototype.Send
        prototype.Eval
        prototype.IsKnownPlaceholder


------------------------------------------------------------------------
                                                    *autoload/workbook.vim*
                                                    *g:workbook#map_evalblock*
g:workbook#map_evalblock       (default: '<c-cr>')
    Evaluate the current paragraph

                                                    *g:workbook#map_evalblockinv*
g:workbook#map_evalblockinv    (default: '<c-s-cr>')
    Evaluate the current paragraph with |g:workbook#insert_results_in_buffer| temporarily inversed.

                                                    *g:workbook#map_op*
g:workbook#map_op              (default: '<localleader>e')
    Operator map

                                                    *g:workbook#map_leader*
g:workbook#map_leader          (default: '<localleader>w')
    Map leader

                                                    *g:workbook#transcript*
g:workbook#transcript          (default: 1)
    If true, maintain a transcript

                                                    *g:workbook#insert_results_in_buffer*
g:workbook#insert_results_in_buffer (default: 1)
    If true, insert the results of an evaluation below the evaluated 
    code.

    This parameter will be overridden by the value of 
    b:workbook_insert_results_in_buffer_once or 
    b:workbook_insert_results_in_buffer if existant.

                                                    *workbook#RemoveBuffer()*
workbook#RemoveBuffer(bufnr)
    Called from BufDelete


------------------------------------------------------------------------
                                                    *autoload/workbook/ft/r.vim*
                                                    *g:workbook#ft#r#args*
g:workbook#ft#r#args           (default: '--silent --no-save '. (g:workbook#ft#r#cmd =~ '\<Rterm\%(\.exe\)\>' ? '--ess' : '--no-readline --interactive'))
    let g:workbook#ft#r#args = '--slave --no-save'   "

                                                    *g:workbook#ft#r#highlight_debug*
g:workbook#ft#r#highlight_debug (default: 'SpellRare')
    Highlight group for debugged functions.

                                                    *g:workbook#ft#r#mode*
g:workbook#ft#r#mode           (default: '')
    Defined how to talk to R. Possible values are:
    '' ......... run via |job_start()|
    'rserve' ... Use Rserve (doesn't work properly yet)

                                                    *workbook#ft#r#Debug()*
workbook#ft#r#Debug(fn)
    Toggle the debug status of a function.

                                                    *workbook#ft#r#Undebug()*
workbook#ft#r#Undebug(fn)
    Undebug a debugged function.


------------------------------------------------------------------------
                                                    *autoload/workbook/repl.vim*
prototype.Input
    async

prototype.Send
    async

prototype.Eval
    sync

prototype.IsKnownPlaceholder
    TODO Should this be a function that scans all repls?



vim:tw=78:fo=w2croql:isk=!-~,^*,^|,^":ts=8:ft=help:norl:
